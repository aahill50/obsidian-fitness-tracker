// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    workouts      Workout[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workout {
    id        String     @id @default(cuid())
    userId    String
    exercises Exercise[]
    notes     String?
    timestamp DateTime
    user      User       @relation(fields: [userId], references: [id])
}

model Exercise {
    id        String   @id @default(cuid())
    userId    String
    name      String
    workoutId String?
    reps      Rep[]
    workout   Workout? @relation(fields: [workoutId], references: [id])
}

model Rep {
    id         String   @id @default(cuid())
    unitId     String
    unitType   UnitType
    exerciseId String
    repAmount  Float
    unitAmount Float
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

enum UnitType {
    Distance
    Time
    Weight
    Unitless
}

enum TimeRep {
    SECOND
    MINUTE
    HOUR
}

enum WeightRep {
    POUND
    KILOGRAM
}

enum UnitlessRep {
    REPETITION
}
